<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="naitokikaku.sscoordinator.infrastructure.datasource.account.AccountMapper">

    <resultMap id="AccountId" type="naitokikaku.sscoordinator.domain.model.account.identity.AccountId">
        <result property="value" column="account_id"/>
    </resultMap>

    <select id="nextAccountId" resultMap="AccountId">
        SELECT nextval('account.account_id_sequence') as account_id;
    </select>

    <select id="lock" resultMap="AccountId">
        SELECT account_id
        FROM account.accounts
        WHERE account_id = #{accountId.value} FOR UPDATE
    </select>

    <select id="existsInActiveEmailAddresses" resultType="boolean">
        SELECT EXISTS(SELECT * FROM account.active_email_addresses WHERE email_address = #{emailAddress.value})
    </select>

    <insert id="storeTransaction">
        INSERT INTO account.account_transactions (account_transaction_id,
                                                  account_id,
                                                  account_transaction_type_id,
                                                  account_name_revision_id,
                                                  email_address_revision_id,
                                                  password_revision_id)
        VALUES (nextval('account.account_transaction_id_sequence'),
                #{accountId.value},
                (SELECT account_transaction_type_id
                 FROM account.account_transaction_types
                 WHERE account_transaction_type = #{accountTransactionType}),
                (SELECT account_name_revision_id
                 FROM account.latest_account_names
                 WHERE account_id = #{accountId.value}),
                (SELECT email_address_revision_id
                 FROM account.latest_email_addresses
                 WHERE account_id = #{accountId.value}),
                (SELECT password_revision_id FROM account.latest_passwords WHERE account_id = #{accountId.value}))
    </insert>

    <insert id="store">
        INSERT INTO account.accounts (account_id)
        VALUES (#{accountId.value})
    </insert>

    <insert id="storeNameRevision">
        INSERT INTO account.account_name_revisions (account_id, account_name_revision_id, account_name)
        VALUES (#{accountId.value}, nextval('account.account_name_revision_id_sequence'), #{accountName.value})
    </insert>

    <insert id="storeLatestNameRevision">
        INSERT INTO account.latest_account_names (account_id, account_name_revision_id)
        VALUES (#{accountId.value}, currval('account.account_name_revision_id_sequence'))
    </insert>

    <insert id="storeEmailAddressRevision">
        INSERT INTO account.email_address_revisions (account_id, email_address_revision_id, email_address)
        VALUES (#{accountId.value}, nextval('account.email_address_revision_id_sequence'), #{emailAddress.value})
    </insert>

    <insert id="storeLatestEmailAddressRevision">
        INSERT INTO account.latest_email_addresses (account_id, email_address_revision_id)
        VALUES (#{accountId.value}, currval('account.email_address_revision_id_sequence'))
    </insert>

    <insert id="storePasswordRevision">
        INSERT INTO account.password_revisions (account_id, password_revision_id, password)
        VALUES (#{accountId.value}, nextval('account.password_revision_id_sequence'), #{encryptPassword.value})
    </insert>

    <insert id="storeLatestPasswordRevision">
        INSERT INTO account.latest_passwords (account_id, password_revision_id)
        VALUES (#{accountId.value}, currval('account.password_revision_id_sequence'))
    </insert>

    <insert id="storeDeletePointer">
        INSERT INTO account.deleted_accounts (account_id)
        VALUES (#{accountId.value})
    </insert>

    <insert id="storeActiveEmailAddress">
        INSERT INTO account.active_email_addresses (email_address)
        VALUES (#{emailAddress.value})
    </insert>

    <delete id="deleteLatestNamePointer">
        DELETE
        FROM account.latest_account_names
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteLatestEmailAddressPointer">
        DELETE
        FROM account.latest_email_addresses
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteLatestPasswordPointer">
        DELETE
        FROM account.latest_passwords
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteActiveEmailAddress">
        DELETE
        FROM account.active_email_addresses
        WHERE email_address = #{emailAddress.value}
    </delete>

</mapper>
