<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="naitokikaku.sscoordinator.infrastructure.datasource.account.AccountMapper">

    <resultMap id="AccountId" type="naitokikaku.sscoordinator.domain.model.account.identity.AccountId">
        <result property="value" column="account_id"/>
    </resultMap>

    <select id="nextAccountId" resultMap="AccountId">
        SELECT nextval('account.account_id_sequence') as account_id
    </select>

    <insert id="store">
        INSERT INTO account.accounts (account_id)
        VALUES (#{accountId.value})
    </insert>

    <resultMap id="AccountNameRevisionId"
               type="naitokikaku.sscoordinator.domain.model.account.revision.AccountNameRevisionId">
        <result property="value" column="account_name_revision_id"/>
    </resultMap>

    <select id="nextAccountNameRevisionId" resultMap="AccountNameRevisionId">
        SELECT nextval('account.account_name_revision_id_sequence') as account_name_revision_id
    </select>

    <insert id="storeNameRevision">
        INSERT INTO account.account_name_revisions (account_id, account_name_revision_id, account_name)
        VALUES (#{accountId.value}, #{accountNameRevisionId.value}, #{accountName.value})
    </insert>

    <insert id="storeLatestNameRevision">
        INSERT INTO account.latest_account_names (account_id, account_name_revision_id)
        VALUES (#{accountId.value}, #{accountNameRevisionId.value})
    </insert>

    <resultMap id="EmailAddressRevisionId"
               type="naitokikaku.sscoordinator.domain.model.account.revision.EmailAddressRevisionId">
        <result property="value" column="email_address_revision_id"/>
    </resultMap>

    <select id="nextEmailAddressRevisionId" resultMap="EmailAddressRevisionId">
        SELECT nextval('account.email_address_revision_id_sequence') as email_address_revision_id
    </select>

    <insert id="storeEmailAddressRevision">
        INSERT INTO account.email_address_revisions (account_id, email_address_revision_id, email_address)
        VALUES (#{accountId.value}, #{emailAddressRevisionId.value}, #{emailAddress.value})
    </insert>

    <insert id="storeLatestEmailAddressRevision">
        INSERT INTO account.latest_email_addresses (account_id, email_address_revision_id)
        VALUES (#{accountId.value}, #{emailAddressRevisionId.value})
    </insert>

    <resultMap id="PasswordRevisionId"
               type="naitokikaku.sscoordinator.domain.model.account.revision.PasswordRevisionId">
        <result property="value" column="password_revision_id"/>
    </resultMap>

    <select id="nextPasswordRevisionId" resultMap="PasswordRevisionId">
        SELECT nextval('account.password_revision_id_sequence') as password_revision_id
    </select>

    <insert id="storePasswordRevision">
        INSERT INTO account.password_revisions (account_id, password_revision_id, password)
        VALUES (#{accountId.value}, #{passwordRevisionId.value}, #{encryptPassword.value})
    </insert>

    <insert id="storeLatestPasswordRevision">
        INSERT INTO account.latest_passwords (account_id, password_revision_id)
        VALUES (#{accountId.value}, #{passwordRevisionId.value})
    </insert>

    <insert id="storeActiveEmailAddress">
        INSERT INTO account.active_email_addresses (email_address)
        VALUES (#{emailAddress.value})
    </insert>

    <select id="existsInActiveEmailAddresses" resultType="boolean">
        SELECT EXISTS(SELECT * FROM account.active_email_addresses WHERE email_address = #{emailAddress.value})
    </select>

    <resultMap id="CreatedDateTime" type="naitokikaku.sscoordinator.domain.model.fundamentals.datetime.CreatedDateTime">
        <result property="value" column="created_at"/>
    </resultMap>

    <select id="getAccountCreatedDateTime" resultMap="CreatedDateTime">
        SELECT created_at
        FROM account.accounts
        WHERE account_id = #{accountId.value}
    </select>

    <resultMap id="RevisedDateTime" type="naitokikaku.sscoordinator.domain.model.fundamentals.datetime.RevisedDateTime">
        <result property="value" column="revised_at"/>
    </resultMap>

    <select id="getNameRevisionRevisedDateTime" resultMap="RevisedDateTime">
        SELECT revised_at
        FROM account.account_name_revisions
        WHERE account_name_revision_id = #{accountNameRevisionId.value}
    </select>

    <select id="getEmailAddressRevisionRevisedDateTime" resultMap="RevisedDateTime">
        SELECT revised_at
        FROM account.email_address_revisions
        WHERE email_address_revision_id = #{emailAddressRevisionId.value}
    </select>

    <select id="getPasswordRevisionRevisedDateTime" resultMap="RevisedDateTime">
        SELECT revised_at
        FROM account.password_revisions
        WHERE password_revision_id = #{passwordRevisionId.value}
    </select>

    <resultMap id="DeletedDateTime" type="naitokikaku.sscoordinator.domain.model.account.revision.DeletedDateTime">
        <result property="value" column="deleted_at"/>
    </resultMap>

    <select id="getAccountDeletedDateTime" resultMap="DeletedDateTime">
        SELECT deleted_at
        FROM account.deleted_accounts
        WHERE account_id = #{accountId.value}
    </select>

    <select id="getLatestNameRevisionId" resultMap="AccountNameRevisionId">
        SELECT account_name_revision_id
        FROM account.latest_account_names
        WHERE account_id = #{accountId.value}
    </select>

    <select id="getLatestEmailAddressRevisionId" resultMap="EmailAddressRevisionId">
        SELECT email_address_revision_id
        FROM account.latest_email_addresses
        WHERE account_id = #{accountId.value}
    </select>

    <select id="getLatestPasswordRevisionId" resultMap="PasswordRevisionId">
        SELECT password_revision_id
        FROM account.latest_passwords
        WHERE account_id = #{accountId.value}
    </select>

    <delete id="deleteLatestNamePointer">
        DELETE
        FROM account.latest_account_names
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteLatestEmailAddressPointer">
        DELETE
        FROM account.latest_email_addresses
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteLatestPasswordPointer">
        DELETE
        FROM account.latest_passwords
        WHERE account_id = #{accountId.value}
    </delete>

    <delete id="deleteActiveEmailAddress">
        DELETE
        FROM account.active_email_addresses
        WHERE email_address = #{emailAddress.value}
    </delete>

    <insert id="storeDeletePointer">
        INSERT INTO account.deleted_accounts (account_id)
        VALUES (#{accountId.value})
    </insert>

</mapper>
