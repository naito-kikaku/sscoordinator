<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="naitokikaku.sscoordinator.infrastructure.datasource.account.snapshot.AccountSnapshotMapper">

    <resultMap id="AccountSnapshot" type="naitokikaku.sscoordinator.domain.model.account.snapshot.AccountSnapshot">
        <result property="accountStatus.value" column="account_status"/>
        <association property="account" resultMap="Account"/>
        <association property="revision" resultMap="AccountRevision"/>
    </resultMap>

    <resultMap id="Account" type="naitokikaku.sscoordinator.domain.model.account.Account">
        <result property="id.value" column="account_id"/>
        <result property="name.value" column="account_name"/>
        <result property="emailAddress.value" column="email_address"/>
        <result property="password.value" column="password"/>
    </resultMap>

    <resultMap id="AccountRevision" type="naitokikaku.sscoordinator.domain.model.account.revision.AccountRevision">
        <result property="deletedDateTime.value" column="deleted_at"/>
        <result property="revisedDateTime.value" column="revised_at"/>
        <result property="createdDateTime.value" column="created_at"/>
    </resultMap>

    <sql id="selectLatest">
        SELECT accounts.account_id,
               account_name_revisions.account_name,
               email_address_revisions.email_address,
               password_revisions.password,
               CASE WHEN deleted_accounts IS NULL THEN 'ENABLE' ELSE 'DISABLE' END as account_status,
               deleted_accounts.deleted_at,
               GREATEST(account_name_revisions.revised_at,
                        email_address_revisions.revised_at,
                        password_revisions.revised_at),
               accounts.created_at
        FROM account.accounts
                 JOIN account.latest_account_names ON accounts.account_id = latest_account_names.account_id
                 JOIN account.account_name_revisions
                     ON latest_account_names.account_name_revision_id = account_name_revisions.account_name_revision_id
                 JOIN account.latest_email_addresses ON accounts.account_id = latest_email_addresses.account_id
                 JOIN account.email_address_revisions ON latest_email_addresses.email_address_revision_id =
                                                         email_address_revisions.email_address_revision_id
                 JOIN account.latest_passwords ON accounts.account_id = latest_passwords.account_id
                 JOIN account.password_revisions
                     ON latest_passwords.password_revision_id = password_revisions.password_revision_id
                 LEFT JOIN account.deleted_accounts ON accounts.account_id = deleted_accounts.account_id
    </sql>

    <select id="findLatestById" resultMap="AccountSnapshot">
        <include refid="selectLatest"/>
        WHERE accounts.account_id = #{accountId.value}
    </select>

    <select id="findLatestByEmailAddress" resultMap="AccountSnapshot">
        <include refid="selectLatest"/>
        WHERE email_address_revisions.email_address = #{emailAddress.value}
    </select>

    <select id="findIncompleteCapturedTransactionIds" resultType="Long">
        SELECT account_transaction_id
        FROM account.account_transactions
                EXCEPT
        SELECT account_transaction_id
        FROM account_snapshot.account_snapshots
    </select>

    <insert id="storeSnapshotByTransactionId">
        INSERT INTO account_snapshot.account_snapshots (account_transaction_id,
                                                        account_id,
                                                        account_name,
                                                        email_address,
                                                        password,
                                                        account_status_id,
                                                        account_deleted_at,
                                                        account_revised_at,
                                                        account_created_at)
        SELECT account_transactions.account_transaction_id,
               account_transactions.account_id,
               account_name_revisions.account_name,
               email_address_revisions.email_address,
               password_revisions.password,
               (SELECT account_status_id
                FROM account_snapshot.account_statuses
                WHERE account_status = CASE WHEN deleted_accounts IS NULL THEN 'ENABLE' ELSE 'DISABLE' END),
               deleted_accounts.deleted_at,
               GREATEST(account_name_revisions.revised_at,
                        email_address_revisions.revised_at,
                        password_revisions.revised_at),
               accounts.created_at
        FROM account.account_transactions
                 JOIN account.accounts ON account_transactions.account_id = accounts.account_id
                 JOIN account.account_name_revisions
                     ON account_transactions.account_name_revision_id = account_name_revisions.account_name_revision_id
                 JOIN account.email_address_revisions ON account_transactions.email_address_revision_id =
                                                         email_address_revisions.email_address_revision_id
                 JOIN account.password_revisions
                     ON account_transactions.password_revision_id = password_revisions.password_revision_id
                 LEFT JOIN account.deleted_accounts ON accounts.account_id = deleted_accounts.account_id
        WHERE account_transactions.account_transaction_id = #{accountTransactionId}
    </insert>

</mapper>
