<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="naitokikaku.sscoordinator.infrastructure.datasource.account.snapshot.AccountSnapshotMapper">

    <resultMap id="AccountSnapshot" type="naitokikaku.sscoordinator.domain.model.account.snapshot.AccountSnapshot">
        <result property="accountStatus.value" column="account_status"/>
        <association property="account" resultMap="Account"/>
        <association property="revision" resultMap="AccountRevision"/>
    </resultMap>

    <resultMap id="Account" type="naitokikaku.sscoordinator.domain.model.account.Account">
        <result property="id.value" column="account_id"/>
        <result property="name.value" column="account_name"/>
        <result property="emailAddress.value" column="email_address"/>
        <result property="password.value" column="password"/>
    </resultMap>

    <resultMap id="AccountRevision" type="naitokikaku.sscoordinator.domain.model.account.revision.AccountRevision">
        <result property="accountId.value" column="account_id"/>
        <result property="accountNameRevisionId.value" column="account_name_revision_id"/>
        <result property="emailAddressRevisionId.value" column="email_address_revision_id"/>
        <result property="passwordRevisionId.value" column="password_revision_id"/>
        <result property="deletedDateTime.value" column="account_deleted_at"/>
        <result property="revisedDateTime.value" column="account_revised_at"/>
        <result property="createdDateTime.value" column="account_created_at"/>
    </resultMap>

    <select id="findLatestById" resultMap="AccountSnapshot">
        SELECT account_snapshots.account_snapshot_id,
               account_snapshots.account_id,
               account_snapshots.account_name,
               account_snapshots.email_address,
               account_snapshots.password,
               account_statuses.account_status,
               account_snapshots.account_deleted_at,
               account_snapshots.account_revised_at,
               account_snapshots.account_created_at,
               snapshot_x_account_name_revision.account_name_revision_id,
               snapshot_x_email_address_revision.email_address_revision_id,
               snapshot_x_password_revision.password_revision_id
        FROM account_snapshot.account_snapshots
                 JOIN account_snapshot.account_statuses
                     ON account_snapshots.account_status_id = account_statuses.account_status_id
                 JOIN account_snapshot.snapshot_x_account_name_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_account_name_revision.account_snapshot_id
                 JOIN account_snapshot.snapshot_x_email_address_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_email_address_revision.account_snapshot_id
                 JOIN account_snapshot.snapshot_x_password_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_password_revision.account_snapshot_id
                 JOIN (SELECT MAX(account_snapshot.account_snapshots.account_snapshot_id) account_snapshot_id
                       FROM account_snapshot.account_snapshots
                       WHERE account_snapshots.account_id = #{accountId.value}) latest
                     ON latest.account_snapshot_id = account_snapshots.account_snapshot_id
    </select>

    <select id="findLatestByEmailAddress" resultMap="AccountSnapshot">
        SELECT account_snapshots.account_snapshot_id,
               account_snapshots.account_id,
               account_snapshots.account_name,
               account_snapshots.email_address,
               account_snapshots.password,
               account_statuses.account_status,
               account_snapshots.account_deleted_at,
               account_snapshots.account_revised_at,
               account_snapshots.account_created_at,
               snapshot_x_account_name_revision.account_name_revision_id,
               snapshot_x_email_address_revision.email_address_revision_id,
               snapshot_x_password_revision.password_revision_id
        FROM account_snapshot.account_snapshots
                 JOIN account_snapshot.account_statuses
                     ON account_snapshots.account_status_id = account_statuses.account_status_id
                 JOIN account_snapshot.snapshot_x_account_name_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_account_name_revision.account_snapshot_id
                 JOIN account_snapshot.snapshot_x_email_address_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_email_address_revision.account_snapshot_id
                 JOIN account_snapshot.snapshot_x_password_revision
                     ON account_snapshots.account_snapshot_id = snapshot_x_password_revision.account_snapshot_id
                 JOIN (SELECT MAX(account_snapshot.account_snapshots.account_snapshot_id) account_snapshot_id
                       FROM account_snapshot.account_snapshots
                       WHERE account_snapshots.email_address = #{emailAddress.value}) latest
                     ON latest.account_snapshot_id = account_snapshots.account_snapshot_id
    </select>

    <select id="nextSnapshotId" resultType="Long">
        SELECT nextval('account_snapshot.account_snapshot_id_sequence')
    </select>

    <insert id="store">
        INSERT INTO account_snapshot.account_snapshots (account_snapshot_id,
                                                        account_id,
                                                        account_name,
                                                        email_address,
                                                        password,
                                                        account_status_id,
                                                        account_deleted_at,
                                                        account_revised_at,
                                                        account_created_at)
        VALUES (#{accountSnapshotId},
                #{accountSnapshot.account.id.value},
                #{accountSnapshot.account.name.value},
                #{accountSnapshot.account.emailAddress.value},
                #{accountSnapshot.account.password.value},
                (SELECT account_status_id
                 FROM account_snapshot.account_statuses
                 WHERE account_status = #{accountSnapshot.accountStatus.value}),
                #{accountSnapshot.revision.deletedDateTime.value},
                #{accountSnapshot.revision.revisedDateTime.value},
                #{accountSnapshot.revision.createdDateTime.value})
    </insert>

    <insert id="storeAccountNameRevisionRelation">
        INSERT INTO account_snapshot.snapshot_x_account_name_revision (account_snapshot_id, account_name_revision_id)
        VALUES (#{accountSnapshotId}, #{accountRevision.accountNameRevisionId.value})
    </insert>

    <insert id="storeEmailAddressRevisionRelation">
        INSERT INTO account_snapshot.snapshot_x_email_address_revision (account_snapshot_id, email_address_revision_id)
        VALUES (#{accountSnapshotId}, #{accountRevision.emailAddressRevisionId.value})
    </insert>

    <insert id="storePasswordRevisionRelation">
        INSERT INTO account_snapshot.snapshot_x_password_revision (account_snapshot_id, password_revision_id)
        VALUES (#{accountSnapshotId}, #{accountRevision.passwordRevisionId.value})
    </insert>

</mapper>
